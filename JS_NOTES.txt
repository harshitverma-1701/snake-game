// using innerHTML/ manipulating DOM with id vs with Classes
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript HTML DOM</h2>

<p>Finding HTML Elements by Class Name.</p>
<p class="intro">Hello World!</p>


<p id="demo"></p>

<script>

//document.getElementById("demo").innerHTML = 
demo.innerHTML = 
'The first paragraph (index 0) with class="intro" is: ' 
  + 
document.getElementsByClassName("intro")[0].innerHTML;
//intro[0].innerHTML;

</script>

</body>
</html>


// Snake game with no animation

let snakeDir = { x: 0, y: 0 };
const foodSound = new Audio("music/food.mp3"); //ctrl+shift+L
const gameOverSound = new Audio("music/gameover.mp3");
const moveSound = new Audio("music/move.mp3");
const musicSound = new Audio("music/music.mp3");
let speed = 2;
let score = 0;
let lastPaintTime = 0;
let snakeArr = [{ x: 10, y: 15 }];
let food = { x: 6, y: 7 };


function gameEngine() {

  board.innerHTML = ""; //...here, erasing previous contents, to access and write(read) HTML contents....

    //move the snake
    snakeArr[0].x += snakeDir.x;
    snakeArr[0].y += snakeDir.y;
  
  //Display snake element
  snakeArr.forEach((e, index) => {
    snakeElement = document.createElement("myDiv");

    console.log(snakeDir.y);
    snakeElement.style.gridRowStart = e.y;
    snakeElement.style.gridColumnStart = e.x;
    if(index === 0){
      snakeElement.classList.add('head'); //can only be used with id/const newElement
    }
    else{
      snakeElement.classList.add('snake');
    }
    board.appendChild(snakeElement); //The appendChild() method appends a node (element) as the last child of an element
  });

  //Display food element
  foodElement = document.createElement("myDiv");
  foodElement.style.gridRowStart = food.y;
  foodElement.style.gridColumnStart = food.x;
  foodElement.classList.add("food");
  board.appendChild(foodElement);

  //console.log(snakeArr[0].y)
}


//Main Functions

document.addEventListener('keydown', e =>{ // addEventList(event, function)
        snakeDir = {x: 0, y: 1} // Start the game
        moveSound.play();
        
        switch (e.key) { //The key property returns the key that was pressed
            case "ArrowUp":
                console.log("ArrowUp");
                snakeDir.x = 0;
                snakeDir.y = -1;
                gameEngine();
                break;
    
            case "ArrowDown":
                console.log("ArrowDown");
                snakeDir.x = 0;
                snakeDir.y = 1;
                gameEngine();
                break;
    
            case "ArrowLeft":
                console.log("ArrowLeft");
                snakeDir.x = -1;
                snakeDir.y = 0;
                gameEngine();
                break;
    
            case "ArrowRight":
                console.log("ArrowRight");
                snakeDir.x = 1;
                snakeDir.y = 0;
                gameEngine();
                break;
            default:
                break;
        }
    //console.log(snakeDir);
    
    });


   
// Snake game with no animation

let snakeDir = { x: 0, y: 0 };
const foodSound = new Audio("music/food.mp3"); //ctrl+shift+L
const gameOverSound = new Audio("music/gameover.mp3");
const moveSound = new Audio("music/move.mp3");
const musicSound = new Audio("music/music.mp3");
let speed = 2;
let score = 0;
let lastPaintTime = 0;
let snakeArr = [{ x: 10, y: 15 }];
let food = { x: 6, y: 7 };


function gameEngine() {

  board.innerHTML = ""; //...here, erasing previous contents, to access and write(read) HTML contents....

  //if you have eaten the food, increment the score and regenerate the food
  if(snakeArr[0].y === food.y && snakeArr[0].x === food.x)
  {
      //replace that food in front with a snake body part, i.e, head, before snake's body, thus, unshift
      snakeArr.unshift({x: snakeArr[0].x + snakeDir.x, y: snakeArr[0].y + snakeDir.y})
      console.log(snakeArr)
       //generating new food
      let a=2;
      let b=16;
      food = {x:Math.round(a + (b-a)*Math.random()), y:Math.round(a + (b-a)*Math.random())}
  }
console.log(snakeArr);
  //moving the snake
        //lenghtening it................
  for (let i = snakeArr.length - 2; i>=0; i--) { 
    snakeArr[i+1] = {...snakeArr[i]};
  }
        //moving it in keypress direction.........
  snakeArr[0].x += snakeDir.x;
  snakeArr[0].y += snakeDir.y;


  
  //Display snake element
  snakeArr.forEach((e, index) => {
    snakeElement = document.createElement("myDiv");

    console.log(snakeDir.y);
    snakeElement.style.gridRowStart = e.y;
    snakeElement.style.gridColumnStart = e.x;
    if(index === 0){
      snakeElement.classList.add('head'); //can only be used with id/const newElement
    }
    else{
      snakeElement.classList.add('snake');
    }
    board.appendChild(snakeElement); //The appendChild() method appends a node (element) as the last child of an element
  });

  //Display food element
  foodElement = document.createElement("myDiv");
  foodElement.style.gridRowStart = food.y;
  foodElement.style.gridColumnStart = food.x;
  foodElement.classList.add("food");
  board.appendChild(foodElement);

  //console.log(snakeArr[0].y)
}


//Main Functions

document.addEventListener('keydown', e =>{ // addEventList(event, function)
        snakeDir = {x: 0, y: 1} // Start the game
        moveSound.play();
        
        switch (e.key) { //The key property returns the key that was pressed
            case "ArrowUp":
                console.log("ArrowUp");
                snakeDir.x = 0;
                snakeDir.y = -1;
                gameEngine();
                break;
    
            case "ArrowDown":
                console.log("ArrowDown");
                snakeDir.x = 0;
                snakeDir.y = 1;
                gameEngine();
                break;
    
            case "ArrowLeft":
                console.log("ArrowLeft");
                snakeDir.x = -1;
                snakeDir.y = 0;
                gameEngine();
                break;
    
            case "ArrowRight":
                console.log("ArrowRight");
                snakeDir.x = 1;
                snakeDir.y = 0;
                gameEngine();
                break;
            default:
                break;
        }
    //console.log(snakeDir);
    
    });